// Here's a showcase of (almost) everything this language can do
// Or at least everything I've decided is relevant
// Also, it's a nice unit test to make sure the project hasn't burned
// down while I wasn't looking.

// -----------------------Builtins---------------------------
// Print to the screen
print("Hello World");

// Print to the screen and take input
numstr = input("Give me a number: ");

// Convert to a number
num = toint(numstr);

// Convert to a string
print("You chose "+tostring(num));

// Choose a random number
mynum = randint(0,50);

// Get the type of a variable
print("Mynum has this type:\n"+typestr(mynum));

// Get a range of numbers
print(range(17));

// Wait for a number of seconds
sleep(5);

// Clear the screen
clear();

// And many others from Python (all, any, enumerate,
// zip, sum, max, min, abs, pow)

// Along with a couple self-explanatory new ones:
// readfile(filename), writefile(filename, data),
// appendfile(filename, data), dictionary(pairs)

// ---------------------Operators------------------------
// Add, Subtract
print(17+5-7);

// Multiply, Divide
print(2*3/4);
print(2*3/4.0);

// Boolean operators
print((!true) == (false&&true) || (true!=false));

// Equality/Inequality
print((7==4) || (8!=9) || (4>5) || (7<=435));


// --------------------Flow Control----------------------
// If statement
if (mynum < 25) {
    print("I chose a number less than 25");
}

// While loop
max = 50;
while (mynum < max) {
    print("My number is less than "+tostring(max));
    max -= 1;
}

// For loop (it's actually foreach but we don't talk about that)
for i in (range(10)) {
    print(tostring(i)+"...");
    sleep(0.25);
}


// ----------------------Methods------------------------

// There are too many, so I'll just list them off.

// Everything: dir

// String: length, startswith, endswith, lower, upper,
// strip, split

// Array: length, reversed, reverse (that one's in place),
// map, ele, filter, has, join, sort, slice

// Dict: length, ele, has, hasval, remove, keys, values, items

// Custom classes: whatever you give them


// -------------------Other features------------------
// Function
func whee(times) {
    for i in (range(times)) {
        print("Whee!");
    }
}
whee(18);
print("Yes");
whee(9);

// Classes
class ClassThing() {
    func ClassThing(constructor_param) {
        // This is how you do constructors
        print("Constructin'");
        print(constructor_param);
        this.test = 18;
    }
    func foo(bar) {
        return this.test+bar;
    }
    func +(arg) {
        return ClassThing(this.test+arg);
    }
}
an_instance = ClassThing(32746);
print(an_instance.foo(11));
print( (an_instance + 4).test );

// Imports (See example_2 to find out what this does)
import "example_2";
rtn = example_2.functiony_thingy();
print("The imported function returned "+tostring(rtn));

// Some builtin imports
import "pmath";
print(pmath.pi*2);
print(pmath.tau); //tau supremacy
// See also: opsys, ptime, pjson, rand, regex, and pbuiltins (technically)
// For a list of their respective functions/etc, see the relevant 
// .py files. Also, I say 'technically' for pbuiltins because it's
// included in every file by default. You probably don't need to import
// it, except maybe to add more builtins.

// Macros (#define, #define_multi and #importdefs)
#define aaa print("aaa")
aaa;
aaa;
aaa;

#define_multi wawawa
print("hey");
print("aaaaaaaaaaaaaaaaaaaaaa");
print
// Unfinished lines are completely fine as long
// as you finish them later. Kinda bad practice
// though, so maybe don't.
#
wawawa(1245);

#importdefs example_3
whee();

#ifdef whh
print("a");
#
#undef whh
#ifdef whh
print("a");
#

// Some more operators (bitwise)
print(1|3);
print(2&3&4&5);
print(6^9);